import { versionBytes } from '../js_crypto/constants.js';
import { base58, tuple, withVersionNumber } from './binable.js';
import { BinableBigint, Bool, Field, ProvableBigint, pseudoClass, } from './field-bigint.js';
import { provable } from './provable-bigint.js';
export { PublicKey, PrivateKey };
// TODO generate
let FIELD_VERSION = 1;
let PUBLIC_KEY_VERSION = 1;
let FieldWithVersion = withVersionNumber(Field, FIELD_VERSION);
let BinablePublicKey = withVersionNumber(tuple([FieldWithVersion, Bool]), PUBLIC_KEY_VERSION);
let Base58PublicKey = base58(BinablePublicKey, versionBytes.publicKey);
const PublicKey = {
    ...provable({ x: Field, isOdd: Bool }),
    toJSON({ x, isOdd }) {
        return Base58PublicKey.toBase58([x, isOdd]);
    },
    fromJSON(json) {
        let [x, isOdd] = Base58PublicKey.fromBase58(json);
        return { x, isOdd };
    },
};
const OTHER_MODULUS = 0x40000000000000000000000000000000224698fc0994a8dd8c46eb2100000001n;
const sizeInBits = OTHER_MODULUS.toString(2).length;
const sizeInBytes = Math.ceil(sizeInBits / 8);
const Scalar = pseudoClass(function Scalar(value) {
    return BigInt(value) % OTHER_MODULUS;
}, { ...ProvableBigint(), ...BinableBigint(sizeInBytes) });
const PrivateKey = {
    ...provable(Scalar),
};
//# sourceMappingURL=curve-bigint.js.map