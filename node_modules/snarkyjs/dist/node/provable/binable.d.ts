import { GenericField } from './generic.js';
export { Binable, Base58, withVersionNumber, tuple, base58, fieldEncodings, prefixToField, bytesToBits, bitsToBytes, };
declare type Binable<T> = {
    toBytes(t: T): number[];
    fromBytes(bytes: number[]): T;
    sizeInBytes(): number;
};
declare function withVersionNumber<T>(binable: Binable<T>, versionNumber?: number): Binable<T>;
declare type Tuple<T> = [T, ...T[]] | [];
declare function tuple<Types extends Tuple<any>>(binables: Array<any> & {
    [i in keyof Types]: Binable<Types[i]>;
}): Binable<Types>;
declare type Base58<T> = {
    toBase58(t: T): string;
    fromBase58(base58: string): T;
};
declare function base58<T>(binable: Binable<T>, versionByte: number): Base58<T>;
declare function fieldEncodings<Field>(Field: Binable<Field>): {
    TokenId: Base58<Field>;
    ReceiptChainHash: Base58<Field>;
    LedgerHash: Base58<Field>;
    EpochSeed: Base58<Field>;
    StateHash: Base58<Field>;
};
declare function prefixToField<Field>(Field: GenericField<Field>, prefix: string): Field;
declare function bitsToBytes(bits: boolean[]): number[];
declare function bytesToBits(bytes: number[]): boolean[];
