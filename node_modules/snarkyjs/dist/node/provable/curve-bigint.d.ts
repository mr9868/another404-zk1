import { Bool, Field } from './field-bigint.js';
export { PublicKey, PrivateKey };
declare type PublicKey = {
    x: Field;
    isOdd: Bool;
};
declare type PrivateKey = bigint;
declare const PublicKey: {
    toJSON({ x, isOdd }: PublicKey): string;
    fromJSON(json: string): PublicKey;
    toFields: (x: {
        x: bigint;
        isOdd: Bool;
    }) => bigint[];
    toAuxiliary: (x?: {
        x: bigint;
        isOdd: Bool;
    } | undefined) => any[];
    fromFields: (x: bigint[], aux: any[]) => {
        x: bigint;
        isOdd: Bool;
    };
    sizeInFields(): number;
    check: (x: {
        x: bigint;
        isOdd: Bool;
    }) => void;
    toInput: (x: {
        x: bigint;
        isOdd: Bool;
    }) => {
        fields?: bigint[] | undefined;
        packed?: [bigint, number][] | undefined;
    };
    emptyValue?: (() => {
        x: bigint;
        isOdd: Bool;
    }) | undefined;
};
declare const PrivateKey: {
    toFields: (x: bigint) => bigint[];
    toAuxiliary: (x?: bigint | undefined) => any[];
    fromFields: (x: bigint[], aux: any[]) => bigint;
    sizeInFields(): number;
    check: (x: bigint) => void;
    toInput: (x: bigint) => {
        fields?: bigint[] | undefined;
        packed?: [bigint, number][] | undefined;
    };
    toJSON: (x: bigint) => string;
    fromJSON: (x: string) => bigint;
    emptyValue?: (() => bigint) | undefined;
};
