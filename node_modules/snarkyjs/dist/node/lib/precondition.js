import { Bool, Field } from '../snarky.js';
import { circuitValueEquals, Circuit } from './circuit_value.js';
import * as Mina from './mina.js';
import { SequenceEvents, Preconditions, } from './account_update.js';
import { UInt32, UInt64 } from './int.js';
import { jsLayout } from '../provable/gen/js-layout.js';
import { emptyReceiptChainHash } from './hash.js';
import { PublicKey } from './signature.js';
export { preconditions, Account, Network, assertPreconditionInvariants, cleanPreconditionsCache, getAccountPreconditions, };
function preconditions(accountUpdate, isSelf) {
    initializePreconditions(accountUpdate, isSelf);
    return { account: Account(accountUpdate), network: Network(accountUpdate) };
}
// note: please keep the two precondition implementations separate
// so we can add customized fields easily
function Network(accountUpdate) {
    let layout = jsLayout.AccountUpdate.entries.body.entries.preconditions.entries.network;
    let context = getPreconditionContextExn(accountUpdate);
    return preconditionClass(layout, 'network', accountUpdate, context);
}
function Account(accountUpdate) {
    let layout = jsLayout.AccountUpdate.entries.body.entries.preconditions.entries.account;
    let context = getPreconditionContextExn(accountUpdate);
    return preconditionClass(layout, 'account', accountUpdate, context);
}
let unimplementedPreconditions = [
    // unimplemented because its not checked in the protocol
    'network.stakingEpochData.seed',
    'network.nextEpochData.seed',
    // this is partially unimplemented because the field is missing on the account endpoint
    // but with the local ledger it works!
    'account.provedState',
];
let baseMap = { UInt64, UInt32, Field, Bool, PublicKey };
function preconditionClass(layout, baseKey, accountUpdate, context) {
    if (layout.type === 'option') {
        // range condition
        if (layout.optionType === 'closedInterval') {
            let lower = layout.inner.entries.lower.type;
            let baseType = baseMap[lower];
            return {
                ...preconditionSubclass(accountUpdate, baseKey, baseType, context),
                assertBetween(lower, upper) {
                    context.constrained.add(baseKey);
                    let property = getPath(accountUpdate.body.preconditions, baseKey);
                    property.isSome = Bool(true);
                    property.value.lower = lower;
                    property.value.upper = upper;
                },
            };
        }
        // value condition
        else if (layout.optionType === 'flaggedOption') {
            let baseType = baseMap[layout.inner.type];
            return preconditionSubclass(accountUpdate, baseKey, baseType, context);
        }
    }
    else if (layout.type === 'array') {
        return {}; // not applicable yet, TODO if we implement state
    }
    else if (layout.type === 'object') {
        // for each field, create a recursive object
        return Object.fromEntries(layout.keys.map((key) => {
            let value = layout.entries[key];
            return [
                key,
                preconditionClass(value, `${baseKey}.${key}`, accountUpdate, context),
            ];
        }));
    }
    else
        throw Error('bug');
}
function preconditionSubclass(accountUpdate, longKey, fieldType, context) {
    if (fieldType === undefined) {
        throw Error(`this.${longKey}: fieldType undefined`);
    }
    return {
        get() {
            if (unimplementedPreconditions.includes(longKey)) {
                let self = context.isSelf ? 'this' : 'accountUpdate';
                throw Error(`${self}.${longKey}.get() is not implemented yet.`);
            }
            let { read, vars } = context;
            read.add(longKey);
            return (vars[longKey] ?? (vars[longKey] = getVariable(accountUpdate, longKey, fieldType)));
        },
        assertEquals(value) {
            context.constrained.add(longKey);
            let property = getPath(accountUpdate.body.preconditions, longKey);
            if ('isSome' in property) {
                property.isSome = Bool(true);
                if ('lower' in property.value && 'upper' in property.value) {
                    property.value.lower = value;
                    property.value.upper = value;
                }
                else {
                    property.value = value;
                }
            }
            else {
                setPath(accountUpdate.body.preconditions, longKey, value);
            }
        },
        assertNothing() {
            context.constrained.add(longKey);
        },
    };
}
function getVariable(accountUpdate, longKey, fieldType) {
    return Circuit.witness(fieldType, () => {
        let [accountOrNetwork, ...rest] = longKey.split('.');
        let key = rest.join('.');
        let value;
        if (accountOrNetwork === 'account') {
            let account = getAccountPreconditions(accountUpdate.body);
            value = account[key];
        }
        else if (accountOrNetwork === 'network') {
            let networkState = Mina.getNetworkState();
            value = getPath(networkState, key);
        }
        else {
            throw Error('impossible');
        }
        return value;
    });
}
function getAccountPreconditions(body) {
    let { publicKey, tokenId } = body;
    let hasAccount = Mina.hasAccount(publicKey, tokenId);
    if (!hasAccount) {
        return {
            balance: UInt64.zero,
            nonce: UInt32.zero,
            receiptChainHash: emptyReceiptChainHash(),
            sequenceState: SequenceEvents.emptySequenceState(),
            delegate: publicKey,
            provedState: Bool(false),
            isNew: Bool(true),
        };
    }
    let account = Mina.getAccount(publicKey, tokenId);
    return {
        balance: account.balance,
        nonce: account.nonce,
        receiptChainHash: account.receiptChainHash,
        sequenceState: account.sequenceState ?? SequenceEvents.emptySequenceState(),
        delegate: account.delegate ?? account.publicKey,
        provedState: account.provedState,
        isNew: Bool(false),
    };
}
function initializePreconditions(accountUpdate, isSelf) {
    preconditionContexts.set(accountUpdate, {
        read: new Set(),
        constrained: new Set(),
        vars: {},
        isSelf,
    });
}
function cleanPreconditionsCache(accountUpdate) {
    let context = preconditionContexts.get(accountUpdate);
    if (context !== undefined)
        context.vars = {};
}
function assertPreconditionInvariants(accountUpdate) {
    let context = getPreconditionContextExn(accountUpdate);
    let self = context.isSelf ? 'this' : 'accountUpdate';
    let dummyPreconditions = Preconditions.ignoreAll();
    for (let preconditionPath of context.read) {
        // check if every precondition that was read was also contrained
        if (context.constrained.has(preconditionPath))
            continue;
        // check if the precondition was modified manually, which is also a valid way of avoiding an error
        let precondition = getPath(accountUpdate.body.preconditions, preconditionPath);
        let dummy = getPath(dummyPreconditions, preconditionPath);
        if (!circuitValueEquals(precondition, dummy))
            continue;
        // we accessed a precondition field but not constrained it explicitly - throw an error
        let hasAssertBetween = isRangeCondition(precondition);
        let shortPath = preconditionPath.split('.').pop();
        let errorMessage = `You used \`${self}.${preconditionPath}.get()\` without adding a precondition that links it to the actual ${shortPath}.
Consider adding this line to your code:
${self}.${preconditionPath}.assertEquals(${self}.${preconditionPath}.get());${hasAssertBetween
            ? `
You can also add more flexible preconditions with \`${self}.${preconditionPath}.assertBetween(...)\`.`
            : ''}`;
        throw Error(errorMessage);
    }
}
function getPreconditionContextExn(accountUpdate) {
    let c = preconditionContexts.get(accountUpdate);
    if (c === undefined)
        throw Error('bug: precondition context not found');
    return c;
}
const preconditionContexts = new WeakMap();
function isRangeCondition(condition) {
    return 'isSome' in condition && 'lower' in condition.value;
}
// helper. getPath({a: {b: 'x'}}, 'a.b') === 'x'
// TODO: would be awesome to type this
function getPath(obj, path) {
    let pathArray = path.split('.').reverse();
    while (pathArray.length > 0) {
        let key = pathArray.pop();
        obj = obj[key];
    }
    return obj;
}
function setPath(obj, path, value) {
    let pathArray = path.split('.');
    let key = pathArray.pop();
    getPath(obj, pathArray.join('.'))[key] = value;
}
//# sourceMappingURL=precondition.js.map